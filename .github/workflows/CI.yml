name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
          - runner: ubuntu-latest
            target: s390x
          - runner: ubuntu-latest
            target: ppc64le
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
          manylinux: musllinux_1_2
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-14
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install uv
        run: |
          pip install uv

      - name: Prepare Python Environment
        shell: bash
        run: |
          python -m venv .venv
          source .venv/bin/activate
          uv pip install -e ".[benchmark]"

      - name: Build & Install Rensa Locally
        shell: bash
        run: |
          source .venv/bin/activate
          maturin develop --release

      - name: Run Benchmark
        shell: bash
        run: |
          source .venv/bin/activate
          uv run benchmarks/simple_benchmark.py > benchmark_log.txt
          cat benchmark_log.txt

      - name: Enforce Performance (>= 10x)
        shell: bash
        run: |
          source .venv/bin/activate
          # Grab the final "X.x faster" line from the benchmark
          perf_line=$(grep "faster than" benchmark_log.txt | tail -1)
          echo "Detected line: $perf_line"

          # If Datasketch is reported as faster, fail immediately
          if echo "$perf_line" | grep -iq "Datasketch is"; then
            echo "Datasketch is faster—FAIL"
            exit 1
          fi

          # Otherwise, parse out the numeric speed multiplier
          speedup=$(echo "$perf_line" | sed -n 's/.* \([0-9\.]*\)x faster.*/\1/p')
          echo "Speedup = $speedup"

          # Fail if the speedup is under 10.0
          if (( $(echo "$speedup < 10" | bc -l) )); then
            echo "Rensa is only ${speedup}x faster (< 10x) — FAIL"
            exit 1
          else
            echo "Rensa is ${speedup}x faster than datasketch, >= 10x requirement — OK"
          fi

          # Check Jaccard similarity
          jaccard_line=$(grep "Jaccard similarity" benchmark_log.txt | tail -1)
          jaccard=$(echo "$jaccard_line" | sed -n 's/.*similarity of deduplicated sets: \([0-9\.]*\)/\1/p')
          echo "Jaccard similarity = $jaccard"

          if (( $(echo "$jaccard < 1.0" | bc -l) )); then
            echo "Jaccard similarity ${jaccard} is not 1.0 — FAIL"
            exit 1
          else
            echo "Jaccard similarity is 1.0 — OK"
          fi

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, musllinux, windows, macos, sdist, performance-check]
    steps:
      - uses: actions/download-artifact@v4
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
